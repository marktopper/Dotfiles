#!/bin/zsh
# FUNCTIONS

# COLORS (to make help message look pretty)
# color_off='\033[0m'
# Regular Colors
Purple=`tput setaf 0`
Red=`tput setaf 1`
Green=`tput setaf 2`
Brown=`tput setaf 3`
Blue=`tput setaf 4`
Magenta=`tput setaf 5`
Cyan=`tput setaf 6`
White=`tput setaf 7`
Black=`tput setaf 8`

# displays helpful info if $HELP_MSG is true
# considering splitting up certain parts of this function into smaller function messages
info-message() {
  echo -e $Red'             USEFUL COMMANDS\n'
  echo -e $Blue'GENERAL(those with -ffs in command use sudo):'
  echo -e '"s" (sudo) | "rt" (switch to root user) | "e" (echo)'
  echo -e '"cpd" (copy directory & contents in it) | "sl" (symlink w/ -srv options set)'
  echo -e '"sinfo" will dispay information about your system (and this entire message).'
  echo -e '"cleanzsh" removes zcompdump and .zwc files in your zsh directory.'
  echo -e '"sctl" sudo systemctl | "sd" sudo systemd'
  echo -e 'Use "own" to take ownership of files. Use "owndir" to recursively take ownership of directories.'
  echo -e 'Use "z" to change to $ZDOTDIR. Use "cheat" to lookup cheatsheets if needing help.\n'
  echo -e $Cyan'APT/DPKG:\n"apc" clean up apt pkgs | "afix" apt-get install -f'
  echo -e '"a" apt | "ag" apt-get | "ac" apt-cache'
  echo -e '"au" update | "ai" install | "ar" reinstall | "arm" remove | "ap" purge | "ase" search | "ash" show'
  echo -e '"mark-a" apt-mark auto | "mark-m" apt-mark manual'
  echo -e '"reconf"  dpkg-reconfigure | "add-arch" dpkg --add-architecture\n'
  echo -e 'GIT related commands:\n"gcedit" edit git commit msg | "gst" status | "gsw" switch branch | "gl" pull | "gp" push | "gca" commit all'
  echo -e '"prcreate" gh pr create --fill | "prmerge" gh pr merge'
  echo -e '"gcb" git checkout -b | "gcd" git checkout $(git_develop_branch)'
  echo -e '"gcf" git config --list | "gcl" git clone --recurse-submodules'
  echo -e '"gclean" git clean -id | "gcm" git checkout $(git_main_branch)'
  echo -e '"gcmsg" git commit -m | "gcn" git commit -v --no-edit --amend'
  echo -e '"gco"  git checkout | "gcor" git checkout --recurse-submodules'
}

unalias help
# Because getting told "there is no list of special help topoics available at this time." is just not helpful enough
help() {
  if [ $# -eq 0 ]
  then
    info-message
  elif [ $# -eq 1 ]
  then
    run-help "$1"
  fi
}

cleanzsh() {
  rm -f ${ZDOTDIR:-$HOME}/.zcompdump* ${ZDOTDIR:-$HOME}/.zshrc.zwc
  omz reload
}


# this will show all Powerlevel10K prompt elements
powerlevel-elements() {
  typeset -A reply
  p10k display -a '*'
  printf '%-32s = %q\n' ${(@kv)reply} | sort
}

# edit recent git commit
function gcedit() {
  git add .
  if [ "$1" != "" ]
  then
	git commit -m "$1"
  else
	git commit -m update # default commit message is `update`
  fi
}

# cheat sheets (github.com/chubin/cheat.sh), find out how to use commands
# example 'cheat tar'
# for language specific question supply 2 args first for language, second as the question
# eample: cheat python3 execute external program
cheat() {
  if [ "$2" ]
  then
	  curl "https://cheat.sh/$1/$2+$3+$4+$5+$6+$7+$8+$9+$10"
  else
	curl "https://cheat.sh/$1"
fi
}

speedtest() {
  curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -
}

echo_colormap() {
  for i in {0..255}; do
    print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}
  done
}

update-plugins() {
  for i in $ZSH/custom/plugins/*; do
    if [ -d "$i" ]; then
      echo "Checking $i for updates..."
      cd "$i"
      git pull
      cd ..
      echo "Done."
    fi
  done && cd $HOME
}

ssh-copy-server-key() {
  if [ $# -eq 0 ]; then
    echo "Specify the server connection details and the public key to install.\n"
    echo "Ex: $0 $HOME/.ssh/id_rsa.pub user@192.168.1.1\n"
  elif [ $# -eq 2 ]; then
    if [[ "$1" == *".pub" ]] && [[ "$2" == *"@"* ]]; then
      echo "Copying public key file $1 to $2 ...\n"
      ssh-copy-id -i "$1" "$2"
      [ $? -eq 0 ] && echo "Operation completed successfully.\n" || echo "Error: Something went wrong.\n"
    else
      echo "Error: Invalid parameters specified.\n"
    fi
  else
    echo "Error: Invalid number of parameters specified.\n"
    echo "Specify the server connection details and the public key to install.\n"
    echo "Ex: $0 $HOME/.ssh/id_rsa.pub user@192.168.1.1\n"
  fi
}

exec-in-bg() {
  if [ $# -eq 0 ]; then
    echo "Specify the command to execute in the background.\n"
    echo "Ex: $0 nohup ./vendor/bin/sail up\n"
  elif [ $# -eq 1 ]; then
    echo "Executing $1 in the background...\n"
    nohup $1 &
  elif [ $# -gt 1 ]; then
    command=$1
    params=$2
    for i in "$@"; do
      if [[ "$i" != "$0" ]] && [[ "$i" != "$1" ]] && [[ "$i" != "$2" ]]; then
        params+=" $i"
      fi
    done
    echo "Executing $command in the background...\n"
    nohup $command $params &
  else
    echo "Unknown error.\n"
    echo "Specify the command to execute in the background.\n"
    echo "Ex: $0 nohup ./vendor/bin/sail up\n"
  fi
}

new-Jetstream() {
  if [ $# -eq 0 ]; then
    echo "Specify a name for the project.\n"
    echo "Ex: new-Jetstream project\n"
  elif [ $# -eq 1 ]; then
    echo "Creating new laravel jetstream project...\n"
    laravel new $1 && cd "./$1" && composer require laravel/jetstream
  else
    echo "Invalid parameters specified\n"
  fi
}

# Github

gp-branch() {
  if [ $# -eq 0 ]; then
    echo "Please specify the upstream branch name to push to\n"
  elif [ $# -eq 1 ]; then
    git push --set-upstream origin $1
  else
    echo "Invalid number of parameters specified. Please specify the upstream branch name to push to\n"
  fi
}
